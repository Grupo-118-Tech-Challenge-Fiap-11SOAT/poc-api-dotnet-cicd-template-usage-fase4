replicaCount: 1

image:
  repository: ${DOCKER_REGISTRY}
  imageName: poc-api-dotnet-cicd-template-usage-fase4
  tag: "${POC_IMAGE_TAG}"  # Will be set via --set or CI/CD
  pullPolicy: IfNotPresent

acrCredentials:
  enabled: true
  registry: "${DOCKER_REGISTRY}"
  username: "${ACR_USERNAME}"  # Will be set via --set or CI/CD
  password: "${ACR_PASSWORD}"  # Will be set via --set or CI/CD

nameOverride: "poc-api-dotnet-cicd-template-usage-fase4"
fullnameOverride: "poc-api-dotnet-cicd-template-usage-fase4"

serviceAccount:
  create: true
  annotations: {}
  name: "poc-api-dotnet-cicd-template-usage-fase4-sa"

service:
  port: 80
  instances:
    - name: poc-api-dotnet-cicd-template-usage-fase4
      type: ClusterIP
      port: 80
      targetPort: 8080
      portName: http

internalIngress:
  enabled: true
  className: "nginx-internal-static"
  annotations: {}
  tls: []


resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 64Mi

livenessProbe:
  httpGet:
    path: /healthz  
    port: http
  initialDelaySeconds: 90
  periodSeconds: 30
  timeoutSeconds: 30
  successThreshold: 1
  failureThreshold: 4
readinessProbe:
  httpGet:
    path: /healthz  
    port: http
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 5
  failureThreshold: 10

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70

volumes: []
volumeMounts: []

configMap:
  enabled: false

secret:
  enabled: true
  name: "poc-api-dotnet-cicd-template-usage-fase4"
  annotations: {}
  data:
    db-host: "${POC_DATABASE_HOST}"
    db-port: "${POC_DATABASE_PORT}"
    db-name: "${POC_DATABASE_NAME}"
    api-key: "${POC_API_KEY}"
  envVars:
    - name: POC_DATABASE_HOST
      key: poc-db-host
    - name: POC_DATABASE_PORT
      key: poc-db-port
    - name: POC_DATABASE_NAME
      key: poc-db-name
    - name: POC_API_KEY
      key: poc-api-key

nodeSelector: {}

tolerations: []

affinity: {}